using System;
using System.Net;
using System.Net.Http;
using AetherSec.Core;

namespace AetherSec.Modules
{
	public class JenkinsPanelExploit : IScanModule
	{
		public string Name => "Jenkins Panel Exploit";
		public string Description => "Attempts to exploit Jenkins panel vulnerabilities to gain unauthorized access.";
		public ScanSeverity Severity => ScanSeverity.High;
		public async Task<ScanResult> RunAsync(string targetIp)
		{
			string ftpUrl = $"http://{targetIp}:8080/login?from=%2F";

			try
			{
				var request = (FtpWebRequest)WebRequest.Create(ftpUrl);
				request.Method = WebRequestMethods.Ftp.ListDirectory;
				request.Credentials = new NetworkCredential("anonymous", "anonymous@example.com"); // Default credentials, adjust as needed
				request.Timeout = 5000;

				using var response = (FtpWebResponse)await request.GetResponseAsync();
				if ( response.StatusCode == FtpStatusCode.OpeningData)
				{
					return new ScanResult(
						true,
						"Jenkins panel exploit successful. Unauthorized access granted.",
						targetIp,
						AffectedService: "Jenkins",
						Recommendation: "Change default credentials and secure Jenkins instance.",
						Severity: ScanSeverity.High,
						Vulnerability: "Jenkins Panel Exploit"
					);
				}
			}
			catch ( WebException ex )
			{
				if (ex.Response is FtpWebResponse ftpResponse)
				{
					return new ScanResult(
						false,
						$"Jenkins panel exploit failed: {ftpResponse.StatusDescription}",
						targetIp,
						AffectedService: "FTP",
						Recommendation: "Ensure Jenkins is properly secured and not using default credentials."
					);
				}
			}
			catch (Exception ex)
			{
				return new ScanResult(
					false,
					$"Jenkins panel exploit failed: {ex.Message}",
					targetIp,
					AffectedService: "Jenkins",
					Recommendation: "Check Jenkins configuration and logs for further investigation."
				);
			}
			return new ScanResult(
				false,
				"FTP Server does not allow anonymous logins.",
				targetIp,
				AffectedService: "FTP",
				Severity: ScanSeverity.Low
			);
		}
	}
}
